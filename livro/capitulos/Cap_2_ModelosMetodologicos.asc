== Modelos Metodológicos

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Conhecer os principais modelos de pesquisa.
* Ter uma visão crítica de cada modelo metodológico.
* Identificar qual modelo é amplamente usado na Ciência e na Engenharia da computação.
____________________

//Neste lugar você deve apresentar o conteúdo em forma de diálogo.
Neste capítulo se apresenta os principais métodos para fazer pesquisa científica.



=== Introdução

Texto da sua seção.

=== O modelo empirista

Texto da sua seção.

=== O modelo sistémico

Texto da sua seção.

=== O modelo dialético

Texto da sua seção.

=== Alguns comentários e exemplos

Texto da sua seção.

==== A engenharia de software

Nesta seção coloco em evidência alguns elementos presentes na engenharia de software e na metodologia científica que aparentam ter o mesmo significado.

A engenharia de software tem como objetivo resolver problemas mediante a construção de um produto, denominado software.
Um software é um conjunto de objetos que modelam matemáticamente o problema, estes objetos permitem encontrar uma solução para o problema.
Os objetos do software ajudam na construção de um programa que pode ser executado num computador real.
Tal programa, denominado *programa executavel*, é então uma solução para o problema.
É importante esclarecer que o software não representa apenas o programa executável.
O software contem os modelos matemáticos para o entendimento do problema e ainda, as ideias que permitem resolver o problema.

Para entender melhor o problema que se quer resolver, o software deve conter a *especificação de requisitos*.
Um especificação representa uma propriedade que o software deve verificar quando concluido.
Por exemplo, se o problema a ser resolvido for encontrar as raizes reais de um polinomio de segundo grau, uma especificação de requisitos deve especificar que o programa, quando executado, poderá encontrar uma, duas ou nenhuma raiz para o polinomio.

//Adicionalmente, um principio importante da engenharia de software é o seguinte:
//Sempre que puder, faça um software modificável.
//Isto quer dizer, o software deve ser um objeto  a modificações controláveis pelo engenheiro.

Falta saber quem formula os problemas.
Deve existir alguem que propõe o problema.
Este "alguém" é chamado de "usuário" ou "a parte interessada" (em inglés: stakeholder).
O usuário é geralmente o que contrata a equipe de engenheiros para resolver o problema.
Contudo, nada impede que "a parte interessada" seja outro engenheiro de software.

Antes de revelar porque a engenharia de software tem alguma coisa a ver com a metodologia, vejamos um paralelo entre o processo de construção de um programa e a de construção de um tijolo usado na construção civil:
1) Um cliente (usuário) solicita a construção do tijolo com determinadas dimensões e propriedades para determinado uso.
2) O fabricante acredita que entendeu o que tem que ser feito (o engenheiro especifica os requisitos):
2.1) respeitar as dimensões do tijolo, (requisito)
2.2) respeitar um conjunto de propriedades, por exemplo, não deve quebrar em determinados ensaios mecânicos (requisito).
3) O fabricante  tem ideias (postulados) de como construir o tijolo
4) O fabricante, baseando-se nestas ideas (postulados), constroi um tijolo
5) O fabricante verifica, para este tijolo construido, se ele não viola os requisitos (testes).
6) O tijolo é entregue ao cliente que fará uma avaliação do produto.

O processo de construção acima é, a grosso modo, o modelo clássico de produção de software (waterfall model).
Este processo realiza as seguintes etapas sequencialmente e sistematicamente:
1) "Communication": Nesta etapa se realiza um acordo entre os usuários e os engenheiros do que se quer construir, um dos produtos desta etapa é a especificação de requisitos. Noutras palavras, nesta etapa se define "o que" deve verificar o software.
2) "Planning": Esta atividade fixa um plano de trabalho para a equipe de desenvolvedores do produto. Se estima os recursos necessários para a produção.
3) "Modelling": Esta é a etapa onde se produzem ideias para realizar o que se pede na especificação de requisitos. Neste momento é onde se diz "como" deve ser feito o software.
4) "Construction": Nesta atividade, se traduz as ideias da etapa anterior num programa executável. O programa é executado para verificar que os requisitos de software são verificados.
5) "Deployment": O software é entregue ao usuário, o mesmo fará a avaliação do produto.

//Existem problemas que não podem ser resolvidos por nenhum programa?
//Quem responde a esta questão é a teoria da computação que se analiza na próxima seção.

Começemos a identificar os elementos de metodologia científica na engenharia de software.
O *problema* para o engenheiro de software tem o mesmo significado que a *realidade* para o pesquisador.
No oficio da engenharia de software, o *engenheiro*, poderia fazer o papel de *pesquisador* para construir um *produto do pesquisa*: o *software*.
O software é também um ponto de vista da realidade, então a criação do *software* é também a criação do *objeto* do pesquisador.
Os *postulados* do engenheiro são as *ideias que permitem resolver o problema*.
Estes postulados devem servir de guia para o engenheiro alcançar à solução do problema.
Por último, realizar *testes* com o programa nada mais é do que fazer *experimentos* com o objeto criado pelo pesquisador.

==== A teoria da Computação

Texto da subseção.

==== A pesquisa operacional

Texto da subseção.

=== Recapitulando

Revisão do que foi aprendido.

Reserve o último parágrafo para realizar uma *ponte* para o próximo capítulo.

=== Atividades

. Texto da atividade.

. Texto da atividade.

. Texto da atividade.

// Sempre terminar o arquivo com uma nova linha.

